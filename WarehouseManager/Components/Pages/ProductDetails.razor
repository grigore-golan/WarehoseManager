@page "/product/{Sku}"

@using Core.Models
@using MudBlazor
@using WarehouseManager.Services

<MudPaper Elevation="4" Class="pa-4">
    <MudText Typo="Typo.h4">Product Details</MudText>
    <MudDivider Class="my-2" />
    <MudGrid>
        <MudItem xs="4">
            <MudTextField T="string" Label="SKU" @bind-Value="_product.Sku" ReadOnly="true" />
        </MudItem>
        <MudItem xs="4">
            <MudTextField T="string" Label="Name" @bind-Value="_product.Name" ReadOnly="true" />
        </MudItem>
        <MudItem xs="4">
            <MudTextField T="int" Label="Current Quantity" @bind-Value="_product.Quantity" ReadOnly="true" />
        </MudItem>
    </MudGrid>

    <br />

    <MudTable Items="_events" Hover="true" Striped="true" Dense="true">
        <HeaderContent>
            <MudTh>History</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Event Description">@context</MudTd>
        </RowTemplate>
    </MudTable>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAdjustInventoryDialog">Adjust Inventory</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="BackToList">Back to List</MudButton>
</MudPaper>

@code {
    [Parameter] public string Sku { get; set; } = string.Empty;

    [Inject] private IWarehouseService WarehouseService { get; set; } = null!;
    [Inject] private NavigationManager Navigation { get; set; } = null!;
    [Inject] private IDialogService DialogService { get; set; } = null!;

    private Product _product = new();
    private IEnumerable<string> _events = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task ShowAdjustInventoryDialog()
    {
        var parameters = new DialogParameters
        {
            { "Sku", Sku }
        };

        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium
            };

        var dialog = DialogService.Show<AdjustInventoryDialog>("Adjust Inventory", parameters, options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var inventoryAdjustment = (InventoryAdjustment)result.Data;
            await WarehouseService.AdjustInventoryAsync(inventoryAdjustment);
        }
        await LoadData();
    }

    private async Task LoadData()
    {
        _product = await WarehouseService.GetProductBySkuAsync(Sku) ?? new();
        _events = await WarehouseService.GetProductHistoryAsync(Sku) ?? [];
    }

    private void BackToList()
    {
        Navigation.NavigateTo("/products");
    }
}
